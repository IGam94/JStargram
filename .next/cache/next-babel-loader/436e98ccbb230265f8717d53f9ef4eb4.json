{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from './user';\nimport post from './post';\nimport { combineReducer } from \"redux\";\nconst initialState = {\n  user: {},\n  post: {}\n};\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n};\n\nchangeNickname('LEE');\nconst rootReducer = combineReducer({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/lee/JStargram/reducers/index.js"],"names":["HYDRATE","user","post","combineReducer","initialState","changeNickname","data","type","rootReducer","index","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,cAAT,QAA+B,OAA/B;AAEA,MAAMC,YAAY,GAAG;AACpBH,EAAAA,IAAI,EAAC,EADe;AAIpBC,EAAAA,IAAI,EAAC;AAJe,CAArB;;AAUA,MAAMG,cAAc,GAAIC,IAAD,IAAS;AAC9B,SAAM;AACJC,IAAAA,IAAI,EAAC,iBADD;AAEJD,IAAAA;AAFI,GAAN;AAID,CALD;;AAMAD,cAAc,CAAC,KAAD,CAAd;AAGA,MAAMG,WAAW,GAAIL,cAAc,CAAC;AAClCM,EAAAA,KAAK,EAAC,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAsB;AAC1B,YAAQA,MAAM,CAACJ,IAAf;AACE,WAAKP,OAAL;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,MAAtB;AACE,+CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AACA;AACE,eAAOJ,KAAP;AALN;AAOD,GATiC;AAUlCT,EAAAA,IAVkC;AAWlCC,EAAAA;AAXkC,CAAD,CAAnC;AAgBA,eAAeM,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport user from './user'\r\nimport post from './post'\r\nimport { combineReducer } from \"redux\";\r\n\r\nconst initialState = {\r\n user:{\r\n\r\n },\r\n post:{\r\n\r\n }\r\n};\r\n\r\n\r\nconst changeNickname = (data) =>{\r\n  return{ \r\n    type:'CHANGE_NICKNAME',\r\n    data,\r\n  }\r\n}\r\nchangeNickname('LEE')\r\n\r\n\r\nconst rootReducer =  combineReducer({\r\n  index:(state = {}, action)=>{\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n      console.log('HYDRATE',action);\r\n        return { ...state, ...action.payload };\r\n        default:\r\n          return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n\r\n\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}